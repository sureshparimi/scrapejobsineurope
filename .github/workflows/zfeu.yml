name: Scrape and Archive Jobs

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

jobs:
  ottacomjobs:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checking out repo
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install necessary packages
      - name: Installing necessary packages
        run: |
          apt list --installed
          sudo apt purge google-chrome-stable
          pip install chromedriver-autoinstaller selenium pyvirtualdisplay
          sudo apt-get install xvfb
          pip install requests beautifulsoup4 pandas webdriver-manager selenium

      # Step 4: Run the scraping script
      - name: Run the scraping script
        run: python scratchpad.py || echo "Script failed, continuing workflow"

  archive:
    runs-on: ubuntu-latest
    needs: ottacomjobs
    steps:
      # Step 1: Check out the repository
      - name: Checking out repo
        uses: actions/checkout@v3

      # Step 2: Parse masterdatabase.json into table
      - name: Parse masterdatabase.json into table
        id: parse-json
        run: |
          jq -c 'select(.job_title != null and .job_location != null and .JobLink != null and .JobPosted != null)' masterdatabase.json > temp.json
          mv temp.json masterdatabase.json

      # Step 3: Create the archivedjobs.md file
      - name: Create archivedjobs.md
        run: |
          echo "# Archived Jobs" > archivedjobs.md
          echo "" >> archivedjobs.md
          echo "| Job Title | Job Location | Job Link | Job Posted |" >> archivedjobs.md
          echo "| --- | --- | --- | --- |" >> archivedjobs.md
          jq -r '.[] | "\(.job_title)|\(.job_location)|\(.JobLink)|\(.JobPosted)"' masterdatabase.json | sed 's/null//g' >> archivedjobs.md

      # Step 4: Set Git user credentials
      - name: Set Git user credentials
        run: |
          git config --global user.name "Suresh Parimi"
          git config --global user.email "reachparimi@gmail.com"

      # Step 5: Pull changes from the remote repository
      - name: Pull changes from remote repository
        run: git pull

      # Step 6: Commit and push the changes to archivedjobs.md
      - name: Commit and push if it changed
        run: |
          git add archivedjobs.md
          timestamp=$(date -u)
          git commit -m "Archived jobs: ${timestamp}" || exit 0
          git push

  copy_data:
    runs-on: ubuntu-latest
    needs: archive
    steps:
      # Step 1: Check out the repository
      - name: Checking out repo
        uses: actions/checkout@v3

      # Step 2: Copy masterdatabase.json to alljobs.json
      - name: Copy masterdatabase.json to alljobs.json
        run: |
          cp masterdatabase.json alljobs.json
          # Validate and fix the format of alljobs.json
          jq empty alljobs.json || jq -s '.' alljobs.json > temp.json && mv temp.json alljobs.json

          git add alljobs.json
          git commit -m "Copy masterdatabase.json to alljobs.json" || exit 0
          git push
