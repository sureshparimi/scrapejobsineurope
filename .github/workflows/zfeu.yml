name: Scrape and Archive Jobs

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checking out repo
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Setting up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install necessary packages
      - name: Installing necessary packages
        run: |
          apt list --installed
          sudo apt purge google-chrome-stable
          pip install chromedriver-autoinstaller selenium pyvirtualdisplay
          sudo apt-get install xvfb
          pip install requests beautifulsoup4 pandas webdriver-manager selenium

      # Step 4: Run the scraping script
      - name: Run the scraping script
        run: python scratchpad.py || echo "Script failed, continuing workflow"

  archive:
    runs-on: ubuntu-latest
    needs: scrape
    steps:
      # Step 1: Check out the repository
      - name: Checking out repo
        uses: actions/checkout@v3

      # Step 2: Create the archivedjobs.md file
      - name: Create archivedjobs.md
        run: |
          echo "# Archived Jobs" > archivedjobs.md
          echo "" >> archivedjobs.md
          echo "| Job Title | Job Location | Job Link | Job Posted |" >> archivedjobs.md
          echo "| --- | --- | --- | --- |" >> archivedjobs.md
          jq -r '.[] | select(.job_title and .job_location and .JobLink and .JobPosted) | "\(.job_title)|\(.job_location)|\(.JobLink)|\(.JobPosted)"' masterdatabase.json | sed '/null/d' >> archivedjobs.md

      # Step 3: Set Git user credentials
      - name: Set Git user credentials
        run: |
          git config --global user.name "Suresh Parimi"
          git config --global user.email "reachparimi@gmail.com"

      # Step 4: Pull changes from the remote repository
      - name: Pull changes from remote repository
        run: git pull

      # Step 5: Commit and push the changes to archivedjobs.md
      - name: Commit and push if it changed
        run: |
          git add archivedjobs.md
          timestamp=$(date -u)
          git commit -m "Archived jobs: ${timestamp}" || exit 0
          git push

  generate_archived_jobs:
    runs-on: ubuntu-latest
    needs: archive
    steps:
      # Step 1: Check out the repository
      - name: Checking out repo
        uses: actions/checkout@v3

      # Step 2: Create the archived jobs
      - name: Create archived jobs
        run: |
          # Read the alljobs.json file and extract the keys as table of contents
          keys=$(jq -r 'keys | join(" | ")' alljobs.json)

          # Create the second readme.md file with archived jobs
          echo "# archived jobs " > archived_jobs.md
          echo "" >> archived_jobs.md
          echo "| $keys |" >> archived_jobs.md
          echo "| ---$keys--- |" >> archived_jobs.md

      # Step 3: Print the JSON content in table format
      - name: Print JSON content in table format
        run: |
          echo "" >> archived_jobs.md
          echo "# JSON Content" >> archived_jobs.md
          echo "" >> archived_jobs.md
          echo "| Key | Value |" >> archived_jobs.md
          echo "| --- | --- |" >> archived_jobs.md
          jq -r 'to_entries | .[] | "\(.key) | \(.value) |"' alljobs.json >> archived_jobs.md

      # Step 4: Set Git user credentials
      - name: Set Git user credentials
        run: |
          git config --global user.name "Suresh Parimi"
          git config --global user.email "reachparimi@gmail.com"

      # Step 5: Commit and push the changes to table_of_contents.md
      - name: Commit and push if it changed
        run: |
          git add archived_jobs.md
          timestamp=$(date -u)
          git commit -m "Generate archived jobs: ${timestamp}" || exit 0
          git push

      # Step 6: Update the main readme.md with the link to table_of_contents.md
      - name: Update main readme.md with link to archived_jobs.md
        run: |
          echo "" >> README.md
          echo "# Archived Jobs" >> README.md
          echo "" >> README.md
          echo "Click [here](archived_jobs.md) to view the Archived Jobs." >> README.md

      # Step 7: Commit and push the changes to the main readme.md
      - name: Commit and push if it changed
        run: |
          git add README.md
          timestamp=$(date -u)
          git commit -m "Add link to Archived jobs: ${timestamp}" || exit 0
          git push

  append_data_to_alljobs:
    runs-on: ubuntu-latest
    needs: scrape
    steps:
      # Step 1: Check out the repository
      - name: Checking out repo
        uses: actions/checkout@v3

      # Step 2: Read data from masterdatabase.json and remove []
      - name: Read data from masterdatabase.json and remove []
        run: |
          data=$(jq -c '.' masterdatabase.json)
          echo $data > alljobs.json

      # Step 3: Append the data between two []
      - name: Append the data between two []
        run: |
          sed -i '1s/^/[/; $s/$/]/' alljobs.json

      # Step 4: Set Git user credentials
      - name: Set Git user credentials
        run: |
          git config --global user.name "Suresh Parimi"
          git config --global user.email "reachparimi@gmail.com"

      # Step 5: Pull changes from the remote repository
      - name: Pull changes from remote repository
        run: git pull

      # Step 6: Commit and push the changes to alljobs.json
      - name: Commit and push if it changed
        run: |
          git add alljobs.json
          timestamp=$(date -u)
          git commit -m "Update alljobs.json: ${timestamp}" || exit 0
          git push
